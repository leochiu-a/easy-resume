// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String?
  email    String   @unique
  password String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Resume   Resume[]
}

model Resume {
  id          String        @id @default(uuid())
  resumeTitle String?       @default("我的履歷")
  username    String?       @default("")
  wantedJob   String?       @default("")
  avatarUrl   String?       @default("")
  city        String?       @default("")
  phone       String?       @default("")
  email       String?       @default("")
  intro       String?       @default("")
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  socialLinks SocialLink[]
  groups      ResumeGroup[]
}

model SocialLink {
  id       String @id @default(uuid())
  name     String
  url      String
  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId String
}

model ResumeGroup {
  id       String       @id @default(uuid())
  type     GroupType
  title    String
  fields   GroupField[]
  resume   Resume?      @relation(fields: [resumeId], references: [id])
  resumeId String?
  layout   GroupLayout
}

enum GroupType {
  EmploymentHistory
  Skills
  Education
  Custom
}

model GroupField {
  id            String       @id @default(uuid())
  field1        String?      @default("")
  field2        String?      @default("")
  field3        String?      @default("")
  timeline      Timeline?
  ResumeGroup   ResumeGroup? @relation(fields: [resumeGroupId], references: [id])
  resumeGroupId String?
  description   String?      @default("")
}

enum GroupLayout {
  Simple
  Complex
}

model Timeline {
  id           String     @id @default(uuid())
  from         DateTime?
  to           DateTime?
  groupField   GroupField @relation(fields: [groupFieldId], references: [id])
  groupFieldId String     @unique
}
